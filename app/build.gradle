apply plugin: 'com.android.application'
apply plugin: 'testfairy'


def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext.private = new Properties()
if (rootProject.file('private.properties').exists()) {
    ext.private.load(new FileInputStream(rootProject.file('private.properties')));
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.w1.merchant.android"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0009"

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        buildConfigField "String", "API_SERVER_ADDRESS",
                project.ext.private.getProperty("ApiServerAddress",
                        "\"https://api.w1.ru/OpenApi/\"")
        buildConfigField "String", "API_APP_BEARER",
                project.ext.private.getProperty("ApiAppBearer",
                        "\"{54344285-82DA-42EA-B7D0-0C9B978FFD89}\"")
        buildConfigField "String", "API_TEST_USER",
                project.ext.private.getProperty("ApiTestUser",
                        "\"\"")
        buildConfigField "String", "API_TEST_PASS",
                project.ext.private.getProperty("ApiTestPass",
                        "\"\"")
    }

    signingConfigs {
        debug {
            storeFile file('../w1merchant.keystore')
            storePassword 'android'
            keyAlias 'debug'
            keyPassword 'android'
        }
        beta {
            storeFile file('../w1merchant.keystore')
            storePassword 'android'
            keyAlias 'beta'
            keyPassword 'android'
        }
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "dbg-" + getRevision()
            resValue "string", "app_name", "W1 Merchant dbg" + getRevision()
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        beta {
            applicationIdSuffix ".beta";
            versionNameSuffix "b-" + getRevision()
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.beta
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable 'RtlHardcoded'
    }

    testfairyConfig {
        apiKey "d4c4e1c7be190a08909ce36747839e2ca45e74a2"
        autoUpdate true
        notify true
        iconWatermark true
        video "off";
    }

}

dependencies {
    compile 'com.android.support:support-annotations:21.0.3'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.quanqi:mpandroidchart:1.7.5' // TODO: заменить на PhiJay, когда тот выложит
    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.squareup.okhttp:okhttp-apache:2.2.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

if (ext.private.getProperty("release.StoreFile") != null) {
    android.signingConfigs['release'].storeFile = file(ext.private['release.StoreFile'])
    android.signingConfigs['release'].storePassword = ext.private['release.StorePassword']
    android.signingConfigs['release'].keyAlias = ext.private['release.KeyAlias']
    android.signingConfigs['release'].keyPassword = ext.private['release.KeyPassword']
} else {
    android.buildTypes['release'].signingConfig = null
}
